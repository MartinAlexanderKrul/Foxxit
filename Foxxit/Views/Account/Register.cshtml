@using Foxxit.Models.ViewModels
@model RegisterViewModel
@{Layout = "_Layout";}

<head>
    <link rel="stylesheet" href="~/css/login_style.css">
    <link rel="stylesheet" href="~/css/MainStyles.css">
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">
</head>

<body>
    @if (Html.ViewData.ModelState.Where(x => x.Key.Equals(String.Empty)).Count() > 0)
    {
        <div class="summary">
            @Html.ValidationSummary(true, null, new { @class = "validation_summary" })
        </div>
    }

    <div class="login_form">
        @using (Html.BeginForm("Register", "Account", FormMethod.Post))
        {
            <div class="login_header">
                <span> <img src="~/assets/logo.png" alt="logo" class="login_logo" /></span>
                <span class="login_title">
                    <a>CREATE ACCOUNT</a>
                </span>
            </div>

            <span>
                @Html.TextBoxFor(m => m.UserName, new { @class = "login_field", @placeholder = "username" })
            </span>

            <span class="text-danger">
                @Html.ValidationMessageFor(m => m.UserName, null)
            </span>

            <span>
                @Html.TextBoxFor(m => m.Email, new { @class = "login_field", @placeholder = "email" })
            </span>

            <span class="text-danger">
                @Html.ValidationMessageFor(m => m.Email, null)
            </span>

            <span>
                @Html.PasswordFor(m => m.Password, new { @class = "login_field", @placeholder = "password" })
            </span>

            <span class="text-danger">
                @Html.ValidationMessageFor(m => m.Password, null)
            </span>

            <span>
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "login_field", @placeholder = "confirm password" })
            </span>

            <span class="text-danger">
                @Html.ValidationMessageFor(m => m.ConfirmPassword, null)
                <br>
            </span>

            <input class="login_button" type="submit" value="REGISTER" />
        }

        @await Html.PartialAsync("_ExternalAuthentication")

        <div class="center">
            <span class="center">
                <br>
                @Html.ActionLink("Have already an account?", "Login", "Account")
                <br>
            </span>
        </div>
    </div>
</body>